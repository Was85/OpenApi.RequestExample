name: CI/CD Pipeline

on:
  push:
    branches:
      - 'release/**'
      - main
      - feature/**

env:
  MAJOR: 1
  MINOR: 0
  PATCH: 0
  LABEL: preview

jobs:
  build:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4

      - name: Setup .NET
        uses: actions/setup-dotnet@v3
        with:
          dotnet-version: '8.0.x'

      - name: Restore dependencies
        run: dotnet restore

      - name: Build
        run: dotnet build --configuration Release --no-restore

      # - name: Run tests with coverage
      #   run: |
      #     dotnet test --configuration Release --no-build \
      #       --collect:"XPlat Code Coverage" \
      #       --settings coverlet.runsettings

      # - name: Upload coverage report
      #   uses: actions/upload-artifact@v3
      #   with:
      #     name: coverage-report
      #     path: ${{ github.workspace }}/**/coverage.cobertura.xml

      - name: OWASP Dependency Scan
        uses: dependency-check/Dependency-Check_Action@main
        with:
          project: 'NuGetPackage'
          scanPath: './'
          format: 'HTML'
          failOnCVSS: 7

      - name: Upload OWASP Report
        uses: actions/upload-artifact@v3
        with:
          name: owasp-report
          path: dependency-check-report.html

  deploy:
    runs-on: ubuntu-latest
    needs: build
    if: github.ref == 'refs/heads/main' || startsWith(github.ref, 'refs/heads/release/')
    steps:
      - uses: actions/checkout@v4

      - name: Setup .NET
        uses: actions/setup-dotnet@v3
        with:
          dotnet-version: '8.0.x'
          source-url: https://api.nuget.org/v3/index.json
        env:
          NUGET_AUTH_TOKEN: ${{ secrets.NUGET_API_KEY }}

      - name: Determine package version
        id: set-version
        run: |
          if [[ "$GITHUB_REF" == 'refs/heads/main' ]]; then
            DATE=$(date +%Y%m%d)
            echo "version=${{ env.MAJOR }}.${{ env.MINOR }}.${{ env.PATCH }}-${{ env.LABEL }}-$DATE" >> $GITHUB_OUTPUT
          else
            BRANCH_NAME=${GITHUB_REF#refs/heads/}
            VERSION=${BRANCH_NAME#release/}
            echo "version=$VERSION" >> $GITHUB_OUTPUT
          fi

      - name: Pack NuGet package
        run: dotnet pack -c Release -p:PackageVersion=${{ steps.set-version.outputs.version }}

      - name: Push to NuGet.org
        if: github.ref != 'refs/heads/main'
        run: dotnet nuget push **/*.nupkg --skip-duplicate

      - name: Push preview package
        if: github.ref == 'refs/heads/main'
        run: dotnet nuget push **/*.nupkg --skip-duplicate